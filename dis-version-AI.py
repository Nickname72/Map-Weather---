import sys
import os
import tempfile
import glob
import requests
import webbrowser
import json
import time 
# import wikipedia # –ë–Ü–õ–¨–®–ï –ù–ï –ü–û–¢–†–Ü–ë–ù–û: –£–°–£–í–ê–Ñ–ú–û –ó–û–í–ù–Ü–®–ù–Æ –ó–ê–õ–ï–ñ–ù–Ü–°–¢–¨
from datetime import datetime
from PyQt5 import QtCore, QtGui
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLineEdit, QPushButton, QVBoxLayout, QHBoxLayout,
    QLabel, QFrame, QComboBox, QMessageBox, QInputDialog, QFileDialog,
    QTextEdit, QScrollArea, QSizePolicy
)
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QThread, pyqtSignal, QTimer
from geopy.geocoders import Nominatim
import folium

# ---------------- CONFIGURATION & CONSTANTS ----------------
OPENWEATHERMAP_API_KEY = "1a61ee3445e9c64367cd8d49289388a1" 
DEFAULT_LOCATION = (50.4501, 30.5234) # –ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞
DEFAULT_ZOOM = 6
APP_USER_AGENT = "py_map_weather_app_v1.7_final_fallback"
GEOLOCATOR_TIMEOUT = 10
WEATHER_API_TIMEOUT = 10
IP_API_URL = "http://ip-api.com/json/"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__)) if '__file__' in locals() else os.getcwd()
BACKGROUNDS_DIR = os.path.join(SCRIPT_DIR, "backgrounds")
TEMP_DIR = tempfile.gettempdir()
MAP_TEMP_FILE = os.path.join(TEMP_DIR, "map_weather_app_map.html")
LOG_FILE = os.path.join(SCRIPT_DIR, "app_log.txt")

# –î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è —Ñ–æ–Ω–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
SUPPORTED_EXTS = [".jpg", ".jpeg", ".png", ".bmp", ".webp", ".gif"]
os.makedirs(BACKGROUNDS_DIR, exist_ok=True) 

# –°—Ç–∏–ª—ñ—Å—Ç–∏—á–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
FONT_FAMILY = "Segoe UI, Arial, sans-serif"
COLOR_PRIMARY = "#1e90ff"
COLOR_HOVER = "#1c86ee"
COLOR_BACKGROUND = "rgba(8,12,16,0.6)"
COLOR_TEXT_LIGHT = "#d6d6d6"
COLOR_TEXT_WHITE = "#fff"

def log_message(msg):
    """–ü—Ä–æ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π —É –∫–æ–Ω—Å–æ–ª—ñ —Ç–∞ —Ñ–∞–π–ª—ñ."""
    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    log_entry = f"{timestamp} {msg}"
    print(log_entry)
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(log_entry + "\n")
    except Exception as e:
        print(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª: {e}")

# ---------------- HELPERS: BACKGROUNDS ----------------
def find_background_for(key):
    """–®—É–∫–∞—î —Ñ–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–µ–º (clear, rain, snow —Ç–æ—â–æ) —É –ø–∞–ø—Ü—ñ BACKGROUNDS_DIR."""
    log_message(f"INFO: –®—É–∫–∞—é —Ñ–æ–Ω –¥–ª—è –∫–ª—é—á–∞: {key}")
    for ext in SUPPORTED_EXTS:
        filename_pattern = os.path.join(BACKGROUNDS_DIR, f"{key}*{ext}")
        files = glob.glob(filename_pattern)
        if files:
            log_message(f"INFO: –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ–Ω: {files[0]} –¥–ª—è –∫–ª—é—á–∞ '{key}'")
            return files[0]
    log_message(f"WARNING: –§–æ–Ω –¥–ª—è –∫–ª—é—á–∞ '{key}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ '{BACKGROUNDS_DIR}'.")
    return None

BACKGROUND_IMAGES = {
    "clear": find_background_for("clear"),
    "clouds": find_background_for("clouds"),
    "rain": find_background_for("rain"),
    "storm": find_background_for("storm"),
    "snow": find_background_for("snow"),
}
BACKGROUND_IMAGES["default"] = BACKGROUND_IMAGES.get("clear") or next((f for f in BACKGROUND_IMAGES.values() if f), None)
if not BACKGROUND_IMAGES["default"]:
    log_message(f"WARNING: –ñ–æ–¥–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É '{BACKGROUNDS_DIR}'.")


def choose_background_by_description(desc: str):
    """–í–∏–±–∏—Ä–∞—î —Ñ–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–ø–∏—Å—É –ø–æ–≥–æ–¥–∏."""
    w = (desc or "").lower()
    if "thunder" in w or "storm" in w:
        return BACKGROUND_IMAGES.get("storm") or BACKGROUND_IMAGES.get("rain") or BACKGROUND_IMAGES["default"]
    if "rain" in w or "drizzle" in w or "shower" in w:
        return BACKGROUND_IMAGES.get("rain") or BACKGROUND_IMAGES["default"]
    if "snow" in w or "sleet" in w or "ice" in w:
        return BACKGROUND_IMAGES.get("snow") or BACKGROUND_IMAGES["default"]
    if "cloud" in w or "overcast" in w or "broken" in w or "scattered" in w or "mist" in w or "fog" in w:
        return BACKGROUND_IMAGES.get("clouds") or BACKGROUND_IMAGES["default"]
    if "clear" in w or "sun" in w:
        return BACKGROUND_IMAGES.get("clear") or BACKGROUND_IMAGES["default"]
    return BACKGROUND_IMAGES["default"]

# ---------------- HELPERS: MAPS & GEOLOCATION ----------------
def build_folium_map(lat, lon, zoom=DEFAULT_ZOOM, marker=True):
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –∫–∞—Ä—Ç—É Folium –∑ –∫—ñ–ª—å–∫–æ–º–∞ —à–∞—Ä–∞–º–∏."""
    log_message(f"INFO: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ –¥–ª—è Lat: {lat}, Lon: {lon}")
    m = folium.Map(location=[lat, lon], zoom_start=zoom, control_scale=True)
    
    folium.TileLayer("OpenStreetMap", name="Standard").add_to(m)
    folium.TileLayer("CartoDB positron", name="Light").add_to(m)
    folium.TileLayer("CartoDB dark_matter", name="Dark").add_to(m)
    
    folium.LayerControl().add_to(m)
    if marker:
        folium.Marker([lat, lon], tooltip="Selected location", 
                      icon=folium.Icon(color='red', icon='info-sign')).add_to(m)
    m.add_child(folium.LatLngPopup())
    return m

def save_map_html(m, filename):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∫–∞—Ä—Ç—É Folium —è–∫ HTML-—Ñ–∞–π–ª —É —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é."""
    try:
        m.save(filename)
        log_message(f"INFO: –ö–∞—Ä—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É {filename}")
    except Exception as e:
        log_message(f"ERROR: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞—Ä—Ç—É —É {filename}: {e}")

def geocode_address(address: str):
    """–ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏/–º—ñ—Å—Ü—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Nominatim (OpenStreetMap)."""
    geolocator = Nominatim(user_agent=APP_USER_AGENT)
    try:
        loc = geolocator.geocode(address, exactly_one=True, timeout=GEOLOCATOR_TIMEOUT)
        if loc:
            log_message(f"INFO: –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ: {loc.address}")
            return (loc.latitude, loc.longitude, loc.address)
    except Exception as e:
        log_message(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è '{address}': {e}")
        return None
    return None

# ---------------- HELPERS: WEATHER ----------------
def fetch_weather(lat: float, lon: float, api_key: str, lang: str = "en"):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏ –≤—ñ–¥ OpenWeatherMap."""
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&units=metric&lang={lang}&appid={api_key}"
    log_message(f"INFO: –ó–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏ –¥–ª—è ({lat}, {lon})")
    try:
        r = requests.get(url, timeout=WEATHER_API_TIMEOUT)
        r.raise_for_status() 
        return r.json()
    except requests.exceptions.RequestException as e:
        log_message(f"ERROR: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –ø–æ–≥–æ–¥–∏: {e}")
        if '401 Client Error' in str(e):
             raise ConnectionError("–ü–æ–º–∏–ª–∫–∞ API: –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á OpenWeatherMap.") from e
        raise ConnectionError("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–ª—É–∂–±–∏ –ø–æ–≥–æ–¥–∏.") from e

def weather_summary_text(data: dict, lang: str = "en"):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
    w = data.get("weather", [{}])[0]
    main = data.get("main", {})
    wind = data.get("wind", {})
    sys_data = data.get("sys", {})
    
    name = data.get("name") or data.get("timezone", "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ü–µ")
    country = sys_data.get("country", "")
    full_name = f"{name}, {country}" if country else name
    
    desc = w.get("description", "‚Äî").capitalize()
    temp = main.get("temp")
    feels = main.get("feels_like")
    hum = main.get("humidity")
    pressure = main.get("pressure")
    wind_spd = wind.get("speed")
    ts = data.get("dt")
    
    lines = []
    
    if lang == "uk":
        lines.append(f"üìç {full_name}")
        lines.append(f"üå§ {desc}")
        if temp is not None and feels is not None:
            lines.append(f"üå° {temp:.1f} ¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels:.1f} ¬∞C)")
        if hum is not None:
            lines.append(f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {hum}%")
        if pressure is not None:
            lines.append(f"üîΩ –¢–∏—Å–∫: {pressure} hPa")
        if wind_spd is not None:
            lines.append(f"üçÉ –í—ñ—Ç–µ—Ä: {wind_spd:.1f} –º/—Å")
        if ts:
            lines.append("‚è∞ –û–Ω–æ–≤–ª–µ–Ω–æ: " + datetime.utcfromtimestamp(ts).strftime("%Y-%m-%d %H:%M UTC"))
    else: # English (default)
        lines.append(f"üìç {full_name}")
        lines.append(f"üå§ {desc}")
        if temp is not None and feels is not None:
            lines.append(f"üå° {temp:.1f} ¬∞C (feels like {feels:.1f} ¬∞C)")
        if hum is not None:
            lines.append(f"üíß Humidity: {hum}%")
        if pressure is not None:
            lines.append(f"üîΩ Pressure: {pressure} hPa")
        if wind_spd is not None:
            lines.append(f"üí® Wind: {wind_spd:.1f} m/s")
        if ts:
            lines.append("‚è∞ Updated: " + datetime.utcfromtimestamp(ts).strftime("%Y-%m-%d %H:%M UTC"))
            
    return "\n".join(lines), desc, temp

# ---------------- AI ASSISTANT IMPLEMENTATION: FALLBACK DB ----------------

# –í–Ω—É—Ç—Ä—ñ—à–Ω—è, –Ω–∞–¥—ñ–π–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω—å
INTERNAL_KNOWLEDGE_DB = {
    # --- –ö–†–ê–á–ù–ò ---
    "–≥—Ä—É–∑—ñ—è": ("**–ö—Ä–∞—ó–Ω–∞:** –ì—Ä—É–∑—ñ—è (–°–∞–∫–∞—Ä—Ç–≤–µ–ª–æ)\n**–°—Ç–æ–ª–∏—Ü—è:** –¢–±—ñ–ª—ñ—Å—ñ\n**–ù–∞—Å–µ–ª–µ–Ω–Ω—è:** ~3.7 –º–ª–Ω\n**–Ü—Å—Ç–æ—Ä—ñ—è:** –ö—Ä–∞—ó–Ω–∞ –∑ —Ç–∏—Å—è—á–æ–ª—ñ—Ç–Ω—å–æ—é —ñ—Å—Ç–æ—Ä—ñ—î—é, —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—ñ –Ñ–≤—Ä–æ–ø–∏ —Ç–∞ –ê–∑—ñ—ó. –í—ñ–¥–æ–º–∞ –≤–∏–Ω–æ—Ä–æ–±—Å—Ç–≤–æ–º —Ç–∞ —Å—Ç–∞—Ä–æ–¥–∞–≤–Ω—ñ–º–∏ —Ö—Ä–∞–º–∞–º–∏.", "country"),
    "georgia": ("**Country:** Georgia (Sakartvelo)\n**Capital:** Tbilisi\n**Population:** ~3.7 million\n**History:** A country with a thousand-year history, located at the crossroads of Europe and Asia. Known for its winemaking and ancient churches.", "country"),
    "—É–∫—Ä–∞—ó–Ω–∞": ("**–ö—Ä–∞—ó–Ω–∞:** –£–∫—Ä–∞—ó–Ω–∞\n**–°—Ç–æ–ª–∏—Ü—è:** –ö–∏—ó–≤\n**–ù–∞—Å–µ–ª–µ–Ω–Ω—è:** ~41 –º–ª–Ω (–¥–æ 2022)\n**–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:** –î—Ä—É–≥–∞ –∑–∞ –ø–ª–æ—â–µ—é –∫—Ä–∞—ó–Ω–∞ –≤ –Ñ–≤—Ä–æ–ø—ñ, –≤—ñ–¥–æ–º–∞ —Å–≤–æ—î—é –∫—É–ª—å—Ç—É—Ä–æ—é —Ç–∞ —Ä–æ–¥—é—á–∏–º–∏ —á–æ—Ä–Ω–æ–∑–µ–º–∞–º–∏.", "country"),
    "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω": ("**–ö—Ä–∞—ó–Ω–∞:** –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω\n**–°—Ç–æ–ª–∏—Ü—è:** –ê—Å—Ç–∞–Ω–∞\n**–ù–∞—Å–µ–ª–µ–Ω–Ω—è:** ~20 –º–ª–Ω\n**–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:** –î–µ–≤'—è—Ç–∞ –∑–∞ –ø–ª–æ—â–µ—é –∫—Ä–∞—ó–Ω–∞ —Å–≤—ñ—Ç—É. –í—ñ–¥–æ–º–∞ –∫–æ—Å–º–æ–¥—Ä–æ–º–æ–º –ë–∞–π–∫–æ–Ω—É—Ä —Ç–∞ –≤–µ–ª–∏—á–µ–∑–Ω–∏–º–∏ —Å—Ç–µ–ø–∞–º–∏.", "country"),
    "kazakhstan": ("**Country:** Kazakhstan\n**Capital:** Astana\n**Population:** ~20 million\n**Features:** Ninth largest country by area. Known for the Baikonur Cosmodrome and vast steppes.", "country"),
    "hungary": ("**Country:** Hungary\n**Capital:** Budapest\n**Population:** ~9.6 million\n**Features:** Known for its thermal waters, vibrant culture, and historical role in Central Europe.", "country"),
    
    # --- –ú–Ü–°–¢–ê ---
    "–ª—å–≤—ñ–≤": ("**–ú—ñ—Å—Ç–æ:** –õ—å–≤—ñ–≤\n**–û–±–ª–∞—Å—Ç—å:** –õ—å–≤—ñ–≤—Å—å–∫–∞\n**–Ü—Å—Ç–æ—Ä—ñ—è:** –ó–∞—Å–Ω–æ–≤–∞–Ω–∏–π —É **13 —Å—Ç–æ–ª—ñ—Ç—Ç—ñ**. –ì–æ–ª–æ–≤–Ω–∏–π –∫—É–ª—å—Ç—É—Ä–Ω–∏–π —Ç–∞ –æ—Å–≤—ñ—Ç–Ω—ñ–π —Ü–µ–Ω—Ç—Ä –ó–∞—Ö—ñ–¥–Ω–æ—ó –£–∫—Ä–∞—ó–Ω–∏. –Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π —Ü–µ–Ω—Ç—Ä –õ—å–≤–æ–≤–∞ –≤–Ω–µ—Å–µ–Ω–∏–π –¥–æ —Å–ø–∏—Å–∫—É –°–≤—ñ—Ç–æ–≤–æ—ó —Å–ø–∞–¥—â–∏–Ω–∏ –Æ–ù–ï–°–ö–û.", "city"),
    "–≤–∏–Ω–Ω–∏—Ü—è": ("**–ú—ñ—Å—Ç–æ:** –í—ñ–Ω–Ω–∏—Ü—è\n**–û–±–ª–∞—Å—Ç—å:** –í—ñ–Ω–Ω–∏—Ü—å–∫–∞\n**–Ü—Å—Ç–æ—Ä—ñ—è:** –ü–µ—Ä—à–∞ –∑–≥–∞–¥–∫–∞ –¥–∞—Ç—É—î—Ç—å—Å—è **1363 —Ä–æ–∫–æ–º**. –ù–∞–∑–≤–∞, –π–º–æ–≤—ñ—Ä–Ω–æ, –ø–æ—Ö–æ–¥–∏—Ç—å –≤—ñ–¥ —Å–ª–æ–≤–∞ '–≤—ñ–Ω–æ'. –í—ñ–¥–æ–º–∞ –Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–º —Ñ–æ–Ω—Ç–∞–Ω–æ–º Roshen.", "city"),
    "–∫–∏—ó–≤": ("**–ú—ñ—Å—Ç–æ:** –ö–∏—ó–≤\n**–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è:** –°—Ç–æ–ª–∏—Ü—è –£–∫—Ä–∞—ó–Ω–∏, –Ω–∞ —Ä—ñ—á—Ü—ñ –î–Ω—ñ–ø—Ä–æ.\n**–Ü—Å—Ç–æ—Ä—ñ—è:** –û–¥–Ω–µ –∑ –Ω–∞–π–¥–∞–≤–Ω—ñ—à–∏—Ö –º—ñ—Å—Ç –°—Ö—ñ–¥–Ω–æ—ó –Ñ–≤—Ä–æ–ø–∏, –∑–∞—Å–Ω–æ–≤–∞–Ω–µ —É **V —Å—Ç–æ–ª—ñ—Ç—Ç—ñ**. –ë—É–≤ —Ü–µ–Ω—Ç—Ä–æ–º –ö–∏—ó–≤—Å—å–∫–æ—ó –†—É—Å—ñ.", "city"),
    "kyiv": ("**City:** Kyiv\n**Location:** Capital of Ukraine, situated on the Dnieper River.\n**History:** One of the oldest cities in Eastern Europe, founded in the **5th century**. It was the historical center of Kyivan Rus'.", "city"),
    "paris": ("**City:** Paris\n**Location:** Capital of France, on the River Seine.\n**History:** Known as 'The City of Love' and a global center for art and fashion since the **10th century**.", "city"),
    "–ø–∞—Ä–∏–∂": ("**–ú—ñ—Å—Ç–æ:** –ü–∞—Ä–∏–∂\n**–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è:** –°—Ç–æ–ª–∏—Ü—è –§—Ä–∞–Ω—Ü—ñ—ó, –Ω–∞ —Ä—ñ—á—Ü—ñ –°–µ–Ω–∞.\n**–Ü—Å—Ç–æ—Ä—ñ—è:** –í—ñ–¥–æ–º–∏–π —è–∫ '–ú—ñ—Å—Ç–æ –∫–æ—Ö–∞–Ω–Ω—è' —Ç–∞ —Å–≤—ñ—Ç–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä –º–∏—Å—Ç–µ—Ü—Ç–≤–∞ —ñ –º–æ–¥–∏. –¢—É—Ç –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –ï–π—Ñ–µ–ª–µ–≤–∞ –≤–µ–∂–∞ —Ç–∞ –õ—É–≤—Ä.", "city"),
}


class SearchWorker(QThread):
    """–ü–æ—Ç—ñ–∫ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º—ñ—Å—Ç–æ/–∫—Ä–∞—ó–Ω—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –±–∞–∑—É."""
    result_ready = pyqtSignal(str)
    error_occurred = pyqtSignal(str)
    
    def __init__(self, query: str, lang: str):
        super().__init__()
        self.query = query
        self.preferred_lang = lang

    def run(self):
        try:
            time.sleep(0.5) # –Ü–º—ñ—Ç–∞—Ü—ñ—è "–¥—É–º–∫–∏"
            
            q_lower = self.query.lower().strip()
            
            # 1. –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –±–∞–∑—ñ
            if q_lower in INTERNAL_KNOWLEDGE_DB:
                summary, item_type = INTERNAL_KNOWLEDGE_DB[q_lower]
                
                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                if item_type == "country":
                    header = f"<p style='color:#f1c40f; font-weight:bold;'>üåç –ö—Ä–∞—ó–Ω–∞-–ê—Å–∏—Å—Ç–µ–Ω—Ç:</p>"
                else: # city
                    header = f"<p style='color:#76a9ff; font-weight:bold;'>üèôÔ∏è –ú—ñ—Å—Ç–æ-–ê—Å–∏—Å—Ç–µ–Ω—Ç:</p>"
                    
                response_text = header + summary
                log_message(f"AI SUCCESS: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ {self.query} –æ—Ç—Ä–∏–º–∞–Ω–∞ –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó –±–∞–∑–∏.")
            else:
                # 2. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É –∑–∞–≥–ª—É—à–∫—É
                log_message(f"AI WARNING: –ó–∞–ø–∏—Ç '{self.query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –±–∞–∑—ñ. –ì–µ–Ω–µ—Ä—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
                
                header = f"<p style='color:#e74c3c; font-weight:bold;'>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ):</p>"
                
                # –°–ø—Ä–æ–±–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ —Ü–µ –∫—Ä–∞—ó–Ω–∞ –∞–±–æ –º—ñ—Å—Ç–æ –∑–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è–º (–¥–ª—è –±—ñ–ª—å—à —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ—ó –∑–∞–≥–ª—É—à–∫–∏)
                geo_res = geocode_address(self.query)
                is_capital = "—Å—Ç–æ–ª–∏—Ü–µ—é" if geo_res and "capital" in geo_res[2].lower() else "–º—ñ—Å—Ü–µ–º"
                
                response_text = (f"{header}–Ø –Ω–µ –∑–Ω–∞–π—à–æ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ **{self.query.title()}** —É —Å–≤–æ—ó–π –ø–æ—Ç–æ—á–Ω—ñ–π –±–∞–∑—ñ. "
                                 f"–ü—Ä–æ—Ç–µ, –∑–≥—ñ–¥–Ω–æ –∑ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏, —Ü–µ –≤–∞–∂–ª–∏–≤–µ {is_capital}. "
                                 f"–î–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ü—è –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ—Å—Ç—ñ–π–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ API.")

            self.result_ready.emit(response_text)
            
        except Exception as e:
            log_message(f"AI FATAL ERROR: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –ø–æ—Ç–æ—Ü—ñ –ø–æ—à—É–∫—É: {e}")
            self.error_occurred.emit("–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É.")

class AICountryInfoDialog(QWidget):
    """–û–∫—Ä–µ–º–µ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ —á–∞—Ç–æ–º."""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("AI –ê—Å–∏—Å—Ç–µ–Ω—Ç: –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ë–∞–∑–∞ –ó–Ω–∞–Ω—å ü§ñ")
        self.resize(650, 550)
        self.worker = None
        self._setup_ui()
        self._setup_style()
        self.setWindowFlags(QtCore.Qt.Window)
        self.parent_app = parent

    def _setup_ui(self):
        main_layout = QVBoxLayout(self)
        
        header = QLabel("ü§ñ AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: –ü–æ—à—É–∫ —É –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ë–∞–∑—ñ")
        header.setStyleSheet(f"font-size:18px; font-weight:bold; color: #1abc9c; margin-bottom: 5px;")
        main_layout.addWidget(header)

        self.chat_history = QTextEdit()
        self.chat_history.setReadOnly(True)
        self.chat_history.setFont(QtGui.QFont(FONT_FAMILY, 10))
        self.chat_history.setHtml(
            "<p style='color:#f1c40f; font-weight:bold;'>AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç:</p>"
            "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é **–≤–Ω—É—Ç—Ä—ñ—à–Ω—é –±–∞–∑—É –∑–Ω–∞–Ω—å** –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—ó –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ **–ì—Ä—É–∑—ñ—è, –õ—å–≤—ñ–≤, –í—ñ–Ω–Ω–∏—Ü—è, —á–∏ Hungary**."
        )
        main_layout.addWidget(self.chat_history)

        self.query_input = QLineEdit()
        self.query_input.setPlaceholderText("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—Ä–∞—ó–Ω–∏ –∞–±–æ –º—ñ—Å—Ç–∞...")
        self.query_input.returnPressed.connect(self.send_query)
        
        self.send_btn = QPushButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç")
        self.send_btn.clicked.connect(self.send_query)

        input_layout = QHBoxLayout()
        input_layout.addWidget(self.query_input, stretch=4)
        input_layout.addWidget(self.send_btn, stretch=1)
        main_layout.addLayout(input_layout)

    def _setup_style(self):
        self.setStyleSheet(f"""
            QWidget {{ 
                background-color: #2c3e50; 
                color: {COLOR_TEXT_WHITE};
                font-family: {FONT_FAMILY};
            }}
            QLineEdit {{ 
                background: rgba(255,255,255,0.95); 
                color:#111; 
                border-radius:10px; 
                padding:8px;
                border: 1px solid #bdc3c7;
            }}
            QPushButton {{ 
                background: #3498db; 
                color:white; 
                border:none; 
                padding:10px; 
                border-radius:8px; 
                font-weight: bold;
            }}
            QPushButton:hover {{ background: #2980b9; }}
            QTextEdit {{
                background-color: #34495e; 
                border: 2px solid #1abc9c; 
                border-radius: 10px;
                padding: 10px;
                color: {COLOR_TEXT_WHITE};
            }}
            QTextEdit p {{ margin-bottom: 5px; }}
        """)

    def send_query(self):
        query = self.query_input.text().strip()
        if not query or (self.worker and self.worker.isRunning()):
            return
        
        self.chat_history.append(f"<p style='color:#1abc9c; font-weight:bold;'>–í–∏:</p>{query}")
        self.query_input.clear()
        
        self.send_btn.setText("–®–Ü –¥—É–º–∞—î... ‚è≥")
        self.send_btn.setEnabled(False)
        
        current_lang = self.parent_app.current_lang if self.parent_app else "uk"
        
        self.worker = SearchWorker(query, current_lang)
        self.worker.result_ready.connect(self.handle_result)
        self.worker.error_occurred.connect(self.handle_error)
        self.worker.finished.connect(self.reset_ui)
        self.worker.start()

    def handle_result(self, result: str):
        html_result = result.replace('**', '<b>') 
        self.chat_history.append(f"<p style='color:#f1c40f; font-weight:bold;'>AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç:</p>{html_result}")

    def handle_error(self, error: str):
        self.chat_history.append(f"<p style='color:#e74c3c; font-weight:bold;'>–ü–æ–º–∏–ª–∫–∞:</p>{error}")

    def reset_ui(self):
        self.send_btn.setText("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç")
        self.send_btn.setEnabled(True)

# ---------------- GUI MAIN APPLICATION ----------------
class MapWeatherApp(QWidget):
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ–¥–∞—Ç–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ —Ç–∞ –ø–æ–≥–æ–¥–∏."""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Map & Weather Explorer Pro üó∫Ô∏èüå¶Ô∏è")
        self.resize(1200, 750) 
        self.current_lat = DEFAULT_LOCATION[0]
        self.current_lon = DEFAULT_LOCATION[1]
        self.current_lang = "uk"
        self.map_tempfile = MAP_TEMP_FILE
        self._current_bg_path = BACKGROUND_IMAGES["default"]
        self.ai_assistant_dialog = None
        
        self._setup_ui()
        self._setup_style()
        self._setup_connections()
        
        self.update_map()
        self.update_weather_and_background()

    def _setup_ui(self):
        # Background
        self.bg_label = QLabel(self)
        self.bg_label.setScaledContents(True)
        self.bg_label.lower()

        # Header label
        self.header_label = QLabel("Weather & Map Explorer")
        self.header_label.setAlignment(QtCore.Qt.AlignCenter)

        # Webview (Map)
        self.webview = QWebEngineView()
        self.webview.setMinimumHeight(350)

        # Search & controls
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Search city or address (e.g., London, Kyiv)")
        self.search_btn = QPushButton("Search üîç")
        self.loc_btn = QPushButton("My Location üè†")
        self.search_input.returnPressed.connect(self.on_search)
        
        self.lang_selector = QComboBox()
        self.lang_selector.addItem("English", "en")
        self.lang_selector.addItem("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "uk")
        if self.current_lang == "uk":
            self.lang_selector.setCurrentIndex(1) 

        # Weather display
        self.temp_label = QLabel("‚Äî¬∞C")
        self.temp_label.setObjectName("temp_label")
        self.desc_label = QLabel("")
        self.desc_label.setObjectName("desc_label")
        self.info_label = QLabel("")
        self.info_label.setWordWrap(True)
        self.info_label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)

        # Action Buttons
        self.refresh_btn = QPushButton("Refresh Weather üîÑ")
        self.open_browser_btn = QPushButton("Open Map in Browser üåê")
        self.resize_map_btn = QPushButton("Resize Map Window üìè")
        self.change_bg_btn = QPushButton("Change Background üñºÔ∏è")
        self.ai_assistant_btn = QPushButton("AI –ê—Å–∏—Å—Ç–µ–Ω—Ç (DB) ü§ñ")
        self.ai_assistant_btn.setObjectName("ai_assistant_btn")

        # Layouts
        top_layout = QVBoxLayout()
        top_layout.addWidget(self.header_label)

        search_layout = QHBoxLayout()
        search_layout.addWidget(self.search_input, stretch=6)
        search_layout.addWidget(self.search_btn)
        search_layout.addWidget(self.loc_btn)
        top_layout.addLayout(search_layout)
        top_layout.setSpacing(6)

        left_layout = QVBoxLayout()
        left_layout.addLayout(top_layout)
        left_layout.addWidget(self.webview)
        left_frame = QFrame()
        left_frame.setLayout(left_layout)
        left_frame.setObjectName("left_panel")

        right_layout = QVBoxLayout()
        right_layout.setContentsMargins(15, 15, 15, 15)
        
        right_layout.addWidget(self.lang_selector)
        right_layout.addSpacing(10)
        
        right_layout.addWidget(QLabel("--- Current Weather Status ---"))
        right_layout.addWidget(self.temp_label)
        right_layout.addWidget(self.desc_label)
        right_layout.addWidget(self.info_label)
        right_layout.addStretch()
        
        right_layout.addWidget(self.ai_assistant_btn) 
        right_layout.addWidget(self.refresh_btn)
        right_layout.addWidget(self.open_browser_btn)
        right_layout.addWidget(self.resize_map_btn)
        right_layout.addWidget(self.change_bg_btn)

        right_frame = QFrame()
        right_frame.setObjectName("glass")
        right_frame.setLayout(right_layout)

        main_layout = QHBoxLayout(self)
        main_layout.addWidget(left_frame, stretch=4)
        main_layout.addWidget(right_frame, stretch=1)
        self.setLayout(main_layout)

    def _setup_style(self):
        self.setStyleSheet(f"""
            QWidget {{ background: transparent; font-family: {FONT_FAMILY}; }}
            
            QFrame#glass {{ 
                background-color: {COLOR_BACKGROUND}; 
                border-radius: 18px; 
            }}
            
            QFrame#left_panel {{ background: transparent; }}

            QLineEdit {{ 
                background: rgba(255,255,255,0.98); 
                color:#111; 
                border-radius:12px; 
                padding:10px 12px;
                border: 1px solid #ccc;
            }}
            QLineEdit::placeholder {{ color:#888; }}
            
            QComboBox {{
                background: rgba(255,255,255,0.9);
                border-radius: 8px;
                padding: 6px;
                color: #333;
            }}
            
            QPushButton {{ 
                background: {COLOR_PRIMARY}; 
                color:white; 
                border:none; 
                padding:10px 15px; 
                border-radius:10px; 
                font-weight: 600;
                margin-top: 5px;
            }}
            QPushButton:hover {{ background: {COLOR_HOVER}; }}
            
            QPushButton#ai_assistant_btn {{
                background: #e74c3c; 
                margin-bottom: 15px;
            }}
            QPushButton#ai_assistant_btn:hover {{ background: #c0392b; }}

            QLabel {{ color:{COLOR_TEXT_LIGHT}; font-size:16px; }}
            QLabel#temp_label {{ font-size:90px; font-weight:800; color:{COLOR_TEXT_WHITE}; margin-bottom: -15px; }}
            QLabel#desc_label {{ font-size:24px; color:#f1c40f; font-weight: 500; }}
            
            QLabel#header_label {{ 
                font-size:48px; 
                font-weight:bold; 
                color:#FFFFFF; 
                margin-bottom:10px;
                padding: 10px;
                background-color: rgba(0,0,0,0.3);
                border-radius: 15px;
            }}
        """)

    def _setup_connections(self):
        self.search_btn.clicked.connect(self.on_search)
        self.loc_btn.clicked.connect(self.on_use_my_location)
        self.refresh_btn.clicked.connect(self.on_refresh) 
        self.open_browser_btn.clicked.connect(self.open_map_in_browser)
        self.lang_selector.currentIndexChanged.connect(self.on_lang_change)
        self.resize_map_btn.clicked.connect(self.on_resize_map)
        self.change_bg_btn.clicked.connect(self.on_change_bg)
        self.ai_assistant_btn.clicked.connect(self.on_ai_assistant)

    def resizeEvent(self, event):
        super().resizeEvent(event)
        self.bg_label.resize(self.size())
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ–Ω—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É
        if self._current_bg_path and os.path.exists(self._current_bg_path):
            pix = QtGui.QPixmap(self._current_bg_path)
            
            if pix.isNull():
                 log_message(f"ERROR: QPixmap –Ω–µ –∑–º–æ–≥–ª–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª: {self._current_bg_path}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
                 return
            
            pix = pix.scaled(self.size(), QtCore.Qt.KeepAspectRatioByExpanding, QtCore.Qt.SmoothTransformation)
            self.bg_label.setPixmap(pix)
            log_message(f"INFO: –§–æ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —Ñ–∞–π–ª—É: {self._current_bg_path}")
        elif self._current_bg_path:
            log_message(f"ERROR: –§–∞–π–ª —Ñ–æ–Ω—É –Ω–µ —ñ—Å–Ω—É—î –∑–∞ —à–ª—è—Ö–æ–º: {self._current_bg_path}")


    # --- Map & Weather Methods ---
    def update_map(self):
        m = build_folium_map(self.current_lat, self.current_lon)
        save_map_html(m, self.map_tempfile)
        self.webview.load(QtCore.QUrl.fromLocalFile(self.map_tempfile))

    def update_weather_and_background(self):
        try:
            data = fetch_weather(self.current_lat, self.current_lon, OPENWEATHERMAP_API_KEY, self.current_lang)
            summary, desc, temp = weather_summary_text(data, self.current_lang)
            
            self.info_label.setText(summary)
            self.temp_label.setText(f"{temp:.0f}¬∞C" if temp is not None else "‚Äî¬∞C")
            self.desc_label.setText(desc.capitalize() if desc else "")
            
            bg = choose_background_by_description(desc)
            if bg:
                self._current_bg_path = bg
                self.resizeEvent(None)
            
        except ConnectionError as e:
            self.info_label.setText(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
            log_message(f"ERROR: {e}")
        except Exception as e:
            self.info_label.setText(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            log_message(f"FATAL: –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

    # --- Actions ---
    def on_refresh(self):
        """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É —Ç–∞ —Ñ–æ–Ω –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó."""
        log_message("ACTION: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏.")
        self.update_weather_and_background()

    def on_search(self):
        query = self.search_input.text().strip()
        if not query: return
        
        self.search_btn.setEnabled(False) 
        self.search_btn.setText("–®—É–∫–∞—î–º–æ...")
        
        res = geocode_address(query)
        
        self.search_btn.setEnabled(True)
        self.search_btn.setText("Search üîç")
        
        if res:
            self.current_lat, self.current_lon, _ = res
            self.update_map()
            self.update_weather_and_background()
        else:
            QMessageBox.warning(self, "Not Found", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.")

    def on_use_my_location(self):
        try:
            r = requests.get(IP_API_URL, timeout=8).json()
            if r.get("status") == "success":
                self.current_lat, self.current_lon = r.get("lat"), r.get("lon")
                self.update_map()
                self.update_weather_and_background()
            else:
                 raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏.")
        except Exception:
            QMessageBox.warning(self, "Error", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–∞ IP.")

    def open_map_in_browser(self):
        if os.path.exists(self.map_tempfile):
            import webbrowser
            webbrowser.open(f"file:///{self.map_tempfile}")
            
    def on_lang_change(self, idx):
        self.current_lang = self.lang_selector.currentData()
        self.update_weather_and_background()

    def on_resize_map(self):
        w, ok1 = QInputDialog.getInt(self, "Map Width", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —à–∏—Ä–∏–Ω—É (px):", 
                                     self.webview.width(), 400, 1400, 10)
        if not ok1: return
        h, ok2 = QInputDialog.getInt(self, "Map Height", "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –≤–∏—Å–æ—Ç—É (px):", 
                                     self.webview.height(), 300, 900, 10)
        if not ok2: return
        
        self.webview.setFixedSize(w, h)
        
    def on_change_bg(self):
        """–í–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ —Ñ–æ–Ω—É —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É."""
        path, _ = QFileDialog.getOpenFileName(self, "Select Background Image", 
                                              BACKGROUNDS_DIR,
                                              f"Images (*{' *'.join(SUPPORTED_EXTS)})")
        if path:
            self._current_bg_path = path 
            self.resizeEvent(None) # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–Ω

    def on_ai_assistant(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
        if self.ai_assistant_dialog is None:
            self.ai_assistant_dialog = AICountryInfoDialog(parent=self)
        self.ai_assistant_dialog.show()

# ---------------- MAIN EXECUTION ----------------
def main():
    log_message("INFO: –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏.")
    
    app = QApplication(sys.argv)
    app.setStyle("Fusion") 
    
    palette = QtGui.QPalette()
    palette.setColor(QtGui.QPalette.Window, QtGui.QColor(43, 47, 51))
    palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
    app.setPalette(palette)
    
    window = MapWeatherApp()
    window.show()
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()